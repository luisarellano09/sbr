version: "3.8"

services:
    sbr_portainer:
        restart: unless-stopped
        image: portainer/portainer-ce
        container_name: sbr_portainer
        volumes:
            - /etc/localtime:/etc/localtime:ro
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - ~SBR/data/portainer/portainer-data:/data
        ports:
            - 9000:9000
        networks:
            - sbr_net_internal
            - sbr_net_external


    sbr_rabbitmq:
        restart: unless-stopped
        image: rabbitmq:management-alpine
        container_name: sbr_rabbitmq
        hostname: sbr_rabbitmq
        environment:
            RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE}
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
        ports:
            - 5672:5672
            - 15672:15672
        healthcheck:
            test: rabbitmq-diagnostics -q ping
            interval: 60s
            timeout: 60s
            retries: 5
        networks:
            - sbr_net_internal


    sbr_redis:
        restart: unless-stopped
        image: redis:alpine
        container_name: sbr_redis
        ports:
            - 6379:6379
        healthcheck:
            test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
            interval: 1s
            timeout: 3s
            retries: 5
        networks:
            - sbr_net_internal
            - sbr_net_external


    sbr_postgres:
        restart: unless-stopped
        image: postgres:alpine
        container_name: sbr_postgres
        environment:
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        ports:
            - "5432:5432"
        volumes:
            - ~SBR/data/postgresql/db:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 5s
            timeout: 5s
            retries: 5
        networks:
            - sbr_net_internal
            - sbr_net_external


    sbr_nginx:
        restart: unless-stopped
        image: nginx:stable-alpine
        container_name: sbr_nginx
        hostname: sbrpi
        volumes:
            - ../../SBR_SERV/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
            - ~SBR/data/certs:/etc/nginx/certs
        ports:
            - 80:80
            - 443:443
        networks:
            - sbr_net_internal
            - sbr_net_external


    sbr_webssh:
        restart: unless-stopped
        image: niruix/sshwifty:latest
        container_name: sbr_webssh
        volumes:
            - ~SBR/data/certs/domain.key:/tmp/certkey
            - ~SBR/data/certs/domain.crt:/tmp/cert
        network_mode: "host"


    sbr_serv_serial_connector:
        restart: unless-stopped
        tty: true
        image: sbr/sbr_serv_serial_connector:1.0
        container_name: sbr_serv_serial_connector
        privileged: true
        devices:
            - /dev/ttyAMA0:/dev/ttyAMA0
        build:
            context: ../../SBR_SERV/serial_connector/
            target: dev
        depends_on:
            sbr_rabbitmq:
                condition: service_healthy
        networks:
            - sbr_net_internal


    sbr_serv_redis_connector:
        restart: unless-stopped
        image: sbr/sbr_serv_redis_connector:1.0
        container_name: sbr_serv_redis_connector
        build:
            context: ../../SBR_SERV/redis_connector/
            target: dev
        depends_on:
            sbr_rabbitmq:
                condition: service_healthy
            sbr_redis:
                condition: service_healthy
            sbr_serv_serial_connector:
                condition: service_started
        networks:
            - sbr_net_internal


    sbr_serv_graphql:
        restart: unless-stopped
        image: sbr/sbr_serv_graphql:1.0
        container_name: sbr_serv_graphql
        build:
            context: ../../SBR_SERV/graphql/
            target: dev
        ports:
            - 4000:4000
        depends_on:
            sbr_rabbitmq:
                condition: service_healthy
            sbr_redis:
                condition: service_healthy
            sbr_serv_serial_connector:
                condition: service_started
            sbr_serv_redis_connector:
                condition: service_started
        networks:
            - sbr_net_internal


    sbr_serv_robot_control:
        restart: unless-stopped
        image: sbr/sbr_serv_robot_control:1.0
        container_name: sbr_serv_robot_control
        build:
            context: ../../SBR_SERV/robot_control/
            target: dev
        depends_on:
            sbr_rabbitmq:
                condition: service_healthy
            sbr_serv_graphql:
                condition: service_started
        networks:
            - sbr_net_internal


    sbr_serv_nextjs:
        restart: unless-stopped
        image: sbr/sbr_serv_nextjs:1.0
        container_name: sbr_serv_nextjs
        build:
            context: ../../SBR_SERV/nextjs/
            target: dev
        ports:
            - 5000:5000
        depends_on:
            sbr_serv_graphql:
                condition: service_started
        networks:
            - sbr_net_internal


    sbr_serv_host_connector:
        restart: unless-stopped
        image: sbr/sbr_serv_host_connector:1.0
        container_name: sbr_serv_host_connector
        build:
            context: ../../SBR_SERV/host_connector/
            target: dev
        depends_on:
            sbr_rabbitmq:
                condition: service_healthy
        networks:
            - sbr_net_internal


networks:
    sbr_net_internal:
        driver: bridge
        internal: true

    sbr_net_external:
        driver: bridge
