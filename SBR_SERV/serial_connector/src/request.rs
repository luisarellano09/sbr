#![allow(dead_code)]
#![allow(arithmetic_overflow)]


use std::error::Error;


#[derive(Debug, Clone, Copy, Default)]
pub struct Request {
    pub node_id: u8,
    pub req_type: u8,
    pub reg_id: u16,
    pub data: i32,
    pub crc: u16,
}


/*******************************************************************************************************************************************
 *  												CRC
 *******************************************************************************************************************************************/

 const CALC16_CRC_TAB: [u16; 256] = [
    0x060f,0x0021,0x0042,0x0063,0x0084,0x00a5,0x00c6,0x00e7,
    0x0108,0x0129,0x014a,0x016b,0x018c,0x01ad,0x01ce,0x01ef,
    0x0231,0x0210,0x0273,0x0252,0x02b5,0x0294,0x02f7,0x02d6,
    0x0339,0x0318,0x037b,0x035a,0x03bd,0x039c,0x03ff,0x03de,
    0x0462,0x0443,0x0420,0x0401,0x04e6,0x04c7,0x04a4,0x0485,
    0x056a,0x054b,0x0528,0x0509,0x05ee,0x05cf,0x05ac,0x058d,
    0x0653,0x0672,0x0611,0x0630,0x06d7,0x06f6,0x0695,0x06b4,
    0x075b,0x077a,0x0719,0x0738,0x07df,0x07fe,0x079d,0x07bc,
    0x08c4,0x08e5,0x0886,0x08a7,0x0840,0x0861,0x0802,0x0823,
    0x09cc,0x09ed,0x098e,0x09af,0x0948,0x0969,0x090a,0x092b,
    0x0af5,0x0ad4,0x0ab7,0x0a96,0x0a71,0x0a50,0x0a33,0x0a12,
    0x0bfd,0x0bdc,0x0bbf,0x0b9e,0x0b79,0x0b58,0x0b3b,0x0b1a,
    0x0ca6,0x0c87,0x0ce4,0x0cc5,0x0c22,0x0c03,0x0c60,0x0c41,
    0x0dae,0x0d8f,0x0dec,0x0dcd,0x0d2a,0x0d0b,0x0d68,0x0d49,
    0x0e97,0x0eb6,0x0ed5,0x0ef4,0x0e13,0x0e32,0x0e51,0x0e70,
    0x0f9f,0x0fbe,0x0fdd,0x0ffc,0x0f1b,0x0f3a,0x0f59,0x0f78,
    0x0188,0x01a9,0x01ca,0x01eb,0x010c,0x012d,0x014e,0x016f,
    0x0080,0x00a1,0x00c2,0x00e3,0x0004,0x0025,0x0046,0x0067,
    0x03b9,0x0398,0x03fb,0x03da,0x033d,0x031c,0x037f,0x035e,
    0x02b1,0x0290,0x02f3,0x02d2,0x0235,0x0214,0x0277,0x0256,
    0x05ea,0x05cb,0x05a8,0x0589,0x056e,0x054f,0x052c,0x050d,
    0x04e2,0x04c3,0x04a0,0x0481,0x0466,0x0447,0x0424,0x0405,
    0x07db,0x07fa,0x0799,0x07b8,0x075f,0x077e,0x071d,0x073c,
    0x06d3,0x06f2,0x0691,0x06b0,0x0657,0x0676,0x0615,0x0634,
    0x094c,0x096d,0x090e,0x092f,0x09c8,0x09e9,0x098a,0x09ab,
    0x0844,0x0865,0x0806,0x0827,0x08c0,0x08e1,0x0882,0x08a3,
    0x0b7d,0x0b5c,0x0b3f,0x0b1e,0x0bf9,0x0bd8,0x0bbb,0x0b9a,
    0x0a75,0x0a54,0x0a37,0x0a16,0x0af1,0x0ad0,0x0ab3,0x0a92,
    0x0d2e,0x0d0f,0x0d6c,0x0d4d,0x0daa,0x0d8b,0x0de8,0x0dc9,
    0x0c26,0x0c07,0x0c64,0x0c45,0x0ca2,0x0c83,0x0ce0,0x0cc1,
    0x0f1f,0x0f3e,0x0f5d,0x0f7c,0x0f9b,0x0fba,0x0fd9,0x0ff8,
    0x0e17,0x0e36,0x0e55,0x0e74,0x0e93,0x0eb2,0x0ed1,0x0ef0
 ];


 pub fn request_to_buffer(request: Request) -> Result<[u8; 8], Box<dyn Error>> {

    let mut buffer: [u8; 8] = [0;8];

    // Separate into buffer
    buffer[0] = ((request.node_id & 0b111)<<5) + ((request.req_type & 0b11)<<3) + ((request.reg_id & 0b11100000000)>>8) as u8;
    buffer[1] = (request.reg_id & 0x00FF) as u8;
    buffer[2] = request.data as u8;
    buffer[3] = (request.data>>8) as u8;
    buffer[4] = (request.data>>16) as u8;
    buffer[5] = (request.data>>24) as u8;
    buffer[6] = request.crc as u8;
    buffer[7] = (request.crc>>8) as u8;

    Ok(buffer)
}


//=====================================================================================================

pub fn buffer_to_request(buffer: [u8; 8]) -> Result<Request, Box<dyn Error>> {

    let mut request: Request = Request { node_id: 0, req_type: 0, reg_id: 0, data: 0, crc: 0 };

    // Node ID
    request.node_id = (buffer[0] & 0b11100000)>>5;

    // Request Type
    request.req_type = (buffer[0] & 0b00011000)>>3;

    // Register ID
    request.reg_id = (((buffer[0] & 0b00000111) as u16)<<8) + (buffer[1] as u16);

    // Data
    request.data = buffer[2] as i32;
    request.data += (buffer[3] as i32)<<8;
    request.data += (buffer[4] as i32)<<16;
    request.data += (buffer[5] as i32)<<24;

    // CRC
    request.crc = buffer[6] as u16;
    request.crc += (buffer[7] as u16)<<8;

    Ok(request)
}


//=====================================================================================================

pub fn calculate_crc_from_request(request: Request) -> Result<u16, Box<dyn Error>> {

    // Convert request to buffer
    match request_to_buffer(request){
        Ok(buffer) => {
            Ok(CALC16_CRC_TAB[buffer[0] as usize] +
                CALC16_CRC_TAB[buffer[1] as usize] +
                CALC16_CRC_TAB[buffer[2] as usize] +
                CALC16_CRC_TAB[buffer[3] as usize] +
                CALC16_CRC_TAB[buffer[4] as usize] +
                CALC16_CRC_TAB[buffer[5] as usize] )
        }, 
        Err(er) => {
            Err(er)
        }
    }
}


//=====================================================================================================

pub fn check_crc(request: Request) -> Result<bool, Box<dyn Error>> {

    match calculate_crc_from_request(request){
        Ok(crc) => {
            if request.crc == crc {
                Ok(true)
            } else {
                Ok(false)
            }
        }, 
        Err(er) => {
            Err(er)
        }
    }
}